/* automatically generated by rust-bindgen */

pub const HL_VERSION: u32 = 68352;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const HL_WSIZE: u32 = 8;
pub const IS_64: u32 = 1;
pub const _PTR_FMT: &'static [u8; 4usize] = b"%lX\0";
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &'static [u8; 1usize] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const __GNUC_VA_LIST: u32 = 1;
pub const hl_invalid_comparison: u32 = 2864434397;
pub const MEM_KIND_DYNAMIC: u32 = 0;
pub const MEM_KIND_RAW: u32 = 1;
pub const MEM_KIND_NOPTR: u32 = 2;
pub const MEM_KIND_FINALIZER: u32 = 3;
pub const MEM_ALIGN_DOUBLE: u32 = 128;
pub const MEM_ZERO: u32 = 256;
pub const TYPE_STR: &'static [u8; 21usize] = b"vcsilfdbBDPOATR??X?N\0";
pub const _VOID: &'static [u8; 2usize] = b"v\0";
pub const _I8: &'static [u8; 2usize] = b"c\0";
pub const _I16: &'static [u8; 2usize] = b"s\0";
pub const _I32: &'static [u8; 2usize] = b"i\0";
pub const _I64: &'static [u8; 2usize] = b"l\0";
pub const _F32: &'static [u8; 2usize] = b"f\0";
pub const _F64: &'static [u8; 2usize] = b"d\0";
pub const _BOOL: &'static [u8; 2usize] = b"b\0";
pub const _BYTES: &'static [u8; 2usize] = b"B\0";
pub const _DYN: &'static [u8; 2usize] = b"D\0";
pub const _ARR: &'static [u8; 2usize] = b"A\0";
pub const _TYPE: &'static [u8; 2usize] = b"T\0";
pub const _JBLEN: u32 = 16;
pub const HL_EXC_MAX_STACK: u32 = 256;
pub const HL_EXC_RETHROW: u32 = 1;
pub const HL_EXC_CATCH_ALL: u32 = 2;
pub const HL_EXC_IS_THROW: u32 = 4;
pub const HL_THREAD_INVISIBLE: u32 = 16;
pub const HL_THREAD_PROFILER_PAUSED: u32 = 32;
pub const HL_TREAD_TRACK_SHIFT: u32 = 16;
pub const HL_TRACK_ALLOC: u32 = 1;
pub const HL_TRACK_CAST: u32 = 2;
pub const HL_TRACK_DYNFIELD: u32 = 4;
pub const HL_TRACK_DYNCALL: u32 = 8;
pub const HL_TRACK_MASK: u32 = 15;
pub const _DOMAIN: u32 = 1;
pub const _SING: u32 = 2;
pub const _OVERFLOW: u32 = 3;
pub const _UNDERFLOW: u32 = 4;
pub const _TLOSS: u32 = 5;
pub const _PLOSS: u32 = 6;
pub const _HUGE_ENUF : f64 = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 ;
pub const _DENORM: i32 = -2;
pub const _FINITE: i32 = -1;
pub const _INFCODE: u32 = 1;
pub const _NANCODE: u32 = 2;
pub const FP_INFINITE: u32 = 1;
pub const FP_NAN: u32 = 2;
pub const FP_NORMAL: i32 = -1;
pub const FP_SUBNORMAL: i32 = -2;
pub const FP_ZERO: u32 = 0;
pub const _C2: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: u32 = 2147483647;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const _FE_DIVBYZERO: u32 = 4;
pub const _FE_INEXACT: u32 = 32;
pub const _FE_INVALID: u32 = 1;
pub const _FE_OVERFLOW: u32 = 8;
pub const _FE_UNDERFLOW: u32 = 16;
pub const _D0_C: u32 = 3;
pub const _D1_C: u32 = 2;
pub const _D2_C: u32 = 1;
pub const _D3_C: u32 = 0;
pub const _DBIAS: u32 = 1022;
pub const _DOFF: u32 = 4;
pub const _F0_C: u32 = 1;
pub const _F1_C: u32 = 0;
pub const _FBIAS: u32 = 126;
pub const _FOFF: u32 = 7;
pub const _FRND: u32 = 1;
pub const _L0_C: u32 = 3;
pub const _L1_C: u32 = 2;
pub const _L2_C: u32 = 1;
pub const _L3_C: u32 = 0;
pub const _LBIAS: u32 = 1022;
pub const _LOFF: u32 = 4;
pub const _FP_LT: u32 = 1;
pub const _FP_EQ: u32 = 2;
pub const _FP_GT: u32 = 4;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub type size_t = ::std::os::raw::c_ulonglong;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type max_align_t = f64;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type bool_ = ::std::os::raw::c_uchar;
pub type int_val = isize;
pub type int64 = ::std::os::raw::c_longlong;
pub type uint64 = ::std::os::raw::c_ulonglong;
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_pctype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_mb_cur_max as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_lc_codepage as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).locinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).mbcinfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Wchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Byte as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._State as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
extern "C" {
    pub fn _calloc_base(_Count: size_t, _Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        _Count: ::std::os::raw::c_ulonglong,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _callnewh(_Size: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _expand(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _malloc_base(_Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(_Size: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _realloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _aligned_malloc(_Size: size_t, _Alignment: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_msize(
        _Block: *mut ::std::os::raw::c_void,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort_s(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn bsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
extern "C" {
    pub fn _lfind_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstod(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstod_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstol(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wcstol_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoll(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoll_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoul(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _wcstoul_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoull(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoull_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstold(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstold_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstof(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn _wcstof_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn _wtof(_String: *const wchar_t) -> f64;
}
extern "C" {
    pub fn _wtof_l(_String: *const wchar_t, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _wtoi(_String: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtoi_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtol(_String: *const wchar_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtol_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtoll(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoll_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtoi64(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoi64_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoui64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoui64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wfullpath(
        _Buffer: *mut wchar_t,
        _Path: *const wchar_t,
        _BufferCount: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut wchar_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    );
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _Dir: *mut wchar_t,
        _Filename: *mut wchar_t,
        _Ext: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _DriveCount: size_t,
        _Dir: *mut wchar_t,
        _DirCount: size_t,
        _Filename: *mut wchar_t,
        _FilenameCount: size_t,
        _Ext: *mut wchar_t,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut wchar_t,
        _BufferCount: *mut size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wputenv(_EnvString: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _ResultPath: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsystem(_Command: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn _set_abort_behavior(
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrMsg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut wchar_t) -> errno_t;
}
extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__div_t() {
    assert_eq!(
        ::std::mem::size_of::<_div_t>(),
        8usize,
        concat!("Size of: ", stringify!(_div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldiv_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(_lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type lldiv_t = _lldiv_t;
extern "C" {
    pub fn abs(_Number: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(_Number: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _abs64(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _byteswap_ushort(_Number: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _byteswap_ulong(_Number: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _byteswap_uint64(_Number: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int, _Denominator: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long, _Denominator: ::std::os::raw::c_long)
        -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        _Numerator: ::std::os::raw::c_longlong,
        _Denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn _rotl(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotl(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotl64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rotr(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotr(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotr64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[test]
fn bindgen_test_layout__LDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LDOUBLE>(),
        10usize,
        concat!("Size of: ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDOUBLE>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LDOUBLE>())).ld as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDOUBLE),
            "::",
            stringify!(ld)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__CRT_DOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CRT_DOUBLE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_DOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[test]
fn bindgen_test_layout__CRT_FLOAT() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Size of: ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Alignment of ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CRT_FLOAT>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_FLOAT),
            "::",
            stringify!(f)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__LONGDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LONGDOUBLE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LONGDOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[test]
fn bindgen_test_layout__LDBL12() {
    assert_eq!(
        ::std::mem::size_of::<_LDBL12>(),
        12usize,
        concat!("Size of: ", stringify!(_LDBL12))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDBL12>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDBL12))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LDBL12>())).ld12 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDBL12),
            "::",
            stringify!(ld12)
        )
    );
}
extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _atoi_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atol_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _atoll_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoflt(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtof(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn _strtof_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtod(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtod_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtold(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtold_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _strtol_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoll(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoll_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _strtoul_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoull_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoi64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoui64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _itoa_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ltoa_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ultoa_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _i64toa_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64toa(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ui64toa_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64toa(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn mbstowcs(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const wchar_t,
        _MaxCountInBytes: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const wchar_t,
        _MaxCountInBytes: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn _fullpath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _BufferCount: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _makepath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveCount: size_t,
        _Dir: *mut ::std::os::raw::c_char,
        _DirCount: size_t,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameCount: size_t,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut ::std::os::raw::c_char,
        _BufferCount: *mut size_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv_s(
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    assert_eq!(
        ::std::mem::size_of::<_iobuf>(),
        8usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._Placeholder as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_Placeholder)
        )
    );
}
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        _Buf: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        _Dst: *mut ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strchr(
        _Str: *const ::std::os::raw::c_char,
        _Val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        _Str: *const ::std::os::raw::c_char,
        _Ch: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        _Str: *const ::std::os::raw::c_char,
        _SubStr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wcschr(
        _Str: *const ::std::os::raw::c_ushort,
        _Ch: ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn wcsrchr(_Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsstr(_Str: *const wchar_t, _SubStr: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _memicmp_l(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
pub type __gnuc_va_list = __builtin_va_list;
pub type _Char16_t = ::std::os::raw::c_ushort;
pub type _Char32_t = ::std::os::raw::c_uint;
pub type char16_t = ::std::os::raw::c_ushort;
pub type char32_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn mbrtoc16(
        _Pc16: *mut char16_t,
        _S: *const ::std::os::raw::c_char,
        _N: size_t,
        _Ps: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn c16rtomb(_S: *mut ::std::os::raw::c_char, _C16: char16_t, _Ps: *mut mbstate_t)
        -> size_t;
}
extern "C" {
    pub fn mbrtoc32(
        _Pc32: *mut char32_t,
        _S: *const ::std::os::raw::c_char,
        _N: size_t,
        _Ps: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn c32rtomb(_S: *mut ::std::os::raw::c_char, _C32: char32_t, _Ps: *mut mbstate_t)
        -> size_t;
}
pub type uchar = char16_t;
extern "C" {
    pub fn ustrlen(str: *const uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ustrdup(str: *const uchar) -> *mut uchar;
}
extern "C" {
    pub fn utod(str: *const uchar, end: *mut *mut uchar) -> f64;
}
extern "C" {
    pub fn utoi(str: *const uchar, end: *mut *mut uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ucmp(a: *const uchar, b: *const uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utostr(
        out: *mut ::std::os::raw::c_char,
        out_size: ::std::os::raw::c_int,
        str: *const uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usprintf(
        out: *mut uchar,
        out_size: ::std::os::raw::c_int,
        fmt: *const uchar,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uvszprintf(
        out: *mut uchar,
        out_size: ::std::os::raw::c_int,
        fmt: *const uchar,
        arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uprintf(fmt: *const uchar, str: *const uchar);
}
pub const hl_type_kind_HVOID: hl_type_kind = 0;
pub const hl_type_kind_HUI8: hl_type_kind = 1;
pub const hl_type_kind_HUI16: hl_type_kind = 2;
pub const hl_type_kind_HI32: hl_type_kind = 3;
pub const hl_type_kind_HI64: hl_type_kind = 4;
pub const hl_type_kind_HF32: hl_type_kind = 5;
pub const hl_type_kind_HF64: hl_type_kind = 6;
pub const hl_type_kind_HBOOL: hl_type_kind = 7;
pub const hl_type_kind_HBYTES: hl_type_kind = 8;
pub const hl_type_kind_HDYN: hl_type_kind = 9;
pub const hl_type_kind_HFUN: hl_type_kind = 10;
pub const hl_type_kind_HOBJ: hl_type_kind = 11;
pub const hl_type_kind_HARRAY: hl_type_kind = 12;
pub const hl_type_kind_HTYPE: hl_type_kind = 13;
pub const hl_type_kind_HREF: hl_type_kind = 14;
pub const hl_type_kind_HVIRTUAL: hl_type_kind = 15;
pub const hl_type_kind_HDYNOBJ: hl_type_kind = 16;
pub const hl_type_kind_HABSTRACT: hl_type_kind = 17;
pub const hl_type_kind_HENUM: hl_type_kind = 18;
pub const hl_type_kind_HNULL: hl_type_kind = 19;
pub const hl_type_kind_HMETHOD: hl_type_kind = 20;
pub const hl_type_kind_HSTRUCT: hl_type_kind = 21;
pub const hl_type_kind_HLAST: hl_type_kind = 22;
pub const hl_type_kind__H_FORCE_INT: hl_type_kind = 2147483647;
pub type hl_type_kind = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_alloc_block {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_alloc {
    pub cur: *mut hl_alloc_block,
}
#[test]
fn bindgen_test_layout_hl_alloc() {
    assert_eq!(
        ::std::mem::size_of::<hl_alloc>(),
        8usize,
        concat!("Size of: ", stringify!(hl_alloc))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_alloc>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_alloc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_alloc>())).cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_alloc),
            "::",
            stringify!(cur)
        )
    );
}
pub type hl_field_lookup = _hl_field_lookup;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_module_context {
    pub alloc: hl_alloc,
    pub functions_ptrs: *mut *mut ::std::os::raw::c_void,
    pub functions_types: *mut *mut hl_type,
}
#[test]
fn bindgen_test_layout_hl_module_context() {
    assert_eq!(
        ::std::mem::size_of::<hl_module_context>(),
        24usize,
        concat!("Size of: ", stringify!(hl_module_context))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_module_context>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_module_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module_context>())).alloc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module_context),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hl_module_context>())).functions_ptrs as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module_context),
            "::",
            stringify!(functions_ptrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hl_module_context>())).functions_types as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module_context),
            "::",
            stringify!(functions_types)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_type_fun {
    pub args: *mut *mut hl_type,
    pub ret: *mut hl_type,
    pub nargs: ::std::os::raw::c_int,
    pub parent: *mut hl_type,
    pub closure_type: hl_type_fun__bindgen_ty_1,
    pub closure: hl_type_fun__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_type_fun__bindgen_ty_1 {
    pub kind: hl_type_kind,
    pub p: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_hl_type_fun__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<hl_type_fun__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(hl_type_fun__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_type_fun__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_type_fun__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_fun__bindgen_ty_1>())).kind as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun__bindgen_ty_1),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_fun__bindgen_ty_1>())).p as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun__bindgen_ty_1),
            "::",
            stringify!(p)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_type_fun__bindgen_ty_2 {
    pub args: *mut *mut hl_type,
    pub ret: *mut hl_type,
    pub nargs: ::std::os::raw::c_int,
    pub parent: *mut hl_type,
}
#[test]
fn bindgen_test_layout_hl_type_fun__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<hl_type_fun__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(hl_type_fun__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_type_fun__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_type_fun__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_fun__bindgen_ty_2>())).args as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun__bindgen_ty_2),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_fun__bindgen_ty_2>())).ret as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun__bindgen_ty_2),
            "::",
            stringify!(ret)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_fun__bindgen_ty_2>())).nargs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun__bindgen_ty_2),
            "::",
            stringify!(nargs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hl_type_fun__bindgen_ty_2>())).parent as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun__bindgen_ty_2),
            "::",
            stringify!(parent)
        )
    );
}
#[test]
fn bindgen_test_layout_hl_type_fun() {
    assert_eq!(
        ::std::mem::size_of::<hl_type_fun>(),
        80usize,
        concat!("Size of: ", stringify!(hl_type_fun))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_type_fun>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_type_fun))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_fun>())).args as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_fun>())).ret as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun),
            "::",
            stringify!(ret)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_fun>())).nargs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun),
            "::",
            stringify!(nargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_fun>())).parent as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_fun>())).closure_type as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun),
            "::",
            stringify!(closure_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_fun>())).closure as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun),
            "::",
            stringify!(closure)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_obj_field {
    pub name: *const uchar,
    pub t: *mut hl_type,
    pub hashed_name: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_hl_obj_field() {
    assert_eq!(
        ::std::mem::size_of::<hl_obj_field>(),
        24usize,
        concat!("Size of: ", stringify!(hl_obj_field))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_obj_field>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_obj_field))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_obj_field>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_obj_field),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_obj_field>())).t as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_obj_field),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_obj_field>())).hashed_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_obj_field),
            "::",
            stringify!(hashed_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_obj_proto {
    pub name: *const uchar,
    pub findex: ::std::os::raw::c_int,
    pub pindex: ::std::os::raw::c_int,
    pub hashed_name: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_hl_obj_proto() {
    assert_eq!(
        ::std::mem::size_of::<hl_obj_proto>(),
        24usize,
        concat!("Size of: ", stringify!(hl_obj_proto))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_obj_proto>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_obj_proto))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_obj_proto>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_obj_proto),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_obj_proto>())).findex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_obj_proto),
            "::",
            stringify!(findex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_obj_proto>())).pindex as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_obj_proto),
            "::",
            stringify!(pindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_obj_proto>())).hashed_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_obj_proto),
            "::",
            stringify!(hashed_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_type_obj {
    pub nfields: ::std::os::raw::c_int,
    pub nproto: ::std::os::raw::c_int,
    pub nbindings: ::std::os::raw::c_int,
    pub name: *const uchar,
    pub super_: *mut hl_type,
    pub fields: *mut hl_obj_field,
    pub proto: *mut hl_obj_proto,
    pub bindings: *mut ::std::os::raw::c_int,
    pub global_value: *mut *mut ::std::os::raw::c_void,
    pub m: *mut hl_module_context,
    pub rt: *mut hl_runtime_obj,
}
#[test]
fn bindgen_test_layout_hl_type_obj() {
    assert_eq!(
        ::std::mem::size_of::<hl_type_obj>(),
        80usize,
        concat!("Size of: ", stringify!(hl_type_obj))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_type_obj>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_type_obj))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_obj>())).nfields as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_obj),
            "::",
            stringify!(nfields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_obj>())).nproto as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_obj),
            "::",
            stringify!(nproto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_obj>())).nbindings as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_obj),
            "::",
            stringify!(nbindings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_obj>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_obj),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_obj>())).super_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_obj),
            "::",
            stringify!(super_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_obj>())).fields as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_obj),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_obj>())).proto as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_obj),
            "::",
            stringify!(proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_obj>())).bindings as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_obj),
            "::",
            stringify!(bindings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_obj>())).global_value as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_obj),
            "::",
            stringify!(global_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_obj>())).m as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_obj),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_obj>())).rt as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_obj),
            "::",
            stringify!(rt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_type_virtual {
    pub fields: *mut hl_obj_field,
    pub nfields: ::std::os::raw::c_int,
    pub dataSize: ::std::os::raw::c_int,
    pub indexes: *mut ::std::os::raw::c_int,
    pub lookup: *mut hl_field_lookup,
}
#[test]
fn bindgen_test_layout_hl_type_virtual() {
    assert_eq!(
        ::std::mem::size_of::<hl_type_virtual>(),
        32usize,
        concat!("Size of: ", stringify!(hl_type_virtual))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_type_virtual>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_type_virtual))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_virtual>())).fields as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_virtual),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_virtual>())).nfields as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_virtual),
            "::",
            stringify!(nfields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_virtual>())).dataSize as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_virtual),
            "::",
            stringify!(dataSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_virtual>())).indexes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_virtual),
            "::",
            stringify!(indexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_virtual>())).lookup as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_virtual),
            "::",
            stringify!(lookup)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_enum_construct {
    pub name: *const uchar,
    pub nparams: ::std::os::raw::c_int,
    pub params: *mut *mut hl_type,
    pub size: ::std::os::raw::c_int,
    pub hasptr: bool_,
    pub offsets: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_hl_enum_construct() {
    assert_eq!(
        ::std::mem::size_of::<hl_enum_construct>(),
        40usize,
        concat!("Size of: ", stringify!(hl_enum_construct))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_enum_construct>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_enum_construct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_enum_construct>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_enum_construct),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_enum_construct>())).nparams as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_enum_construct),
            "::",
            stringify!(nparams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_enum_construct>())).params as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_enum_construct),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_enum_construct>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_enum_construct),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_enum_construct>())).hasptr as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_enum_construct),
            "::",
            stringify!(hasptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_enum_construct>())).offsets as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_enum_construct),
            "::",
            stringify!(offsets)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_type_enum {
    pub name: *const uchar,
    pub nconstructs: ::std::os::raw::c_int,
    pub constructs: *mut hl_enum_construct,
    pub global_value: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_hl_type_enum() {
    assert_eq!(
        ::std::mem::size_of::<hl_type_enum>(),
        32usize,
        concat!("Size of: ", stringify!(hl_type_enum))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_type_enum>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_type_enum))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_enum>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_enum),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_enum>())).nconstructs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_enum),
            "::",
            stringify!(nconstructs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_enum>())).constructs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_enum),
            "::",
            stringify!(constructs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_enum>())).global_value as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_enum),
            "::",
            stringify!(global_value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hl_type {
    pub kind: hl_type_kind,
    pub __bindgen_anon_1: hl_type__bindgen_ty_1,
    pub vobj_proto: *mut *mut ::std::os::raw::c_void,
    pub mark_bits: *mut ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hl_type__bindgen_ty_1 {
    pub abs_name: *const uchar,
    pub fun: *mut hl_type_fun,
    pub obj: *mut hl_type_obj,
    pub tenum: *mut hl_type_enum,
    pub virt: *mut hl_type_virtual,
    pub tparam: *mut hl_type,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_hl_type__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<hl_type__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(hl_type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_type__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type__bindgen_ty_1>())).abs_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type__bindgen_ty_1),
            "::",
            stringify!(abs_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type__bindgen_ty_1>())).fun as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type__bindgen_ty_1),
            "::",
            stringify!(fun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type__bindgen_ty_1>())).obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type__bindgen_ty_1),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type__bindgen_ty_1>())).tenum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type__bindgen_ty_1),
            "::",
            stringify!(tenum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type__bindgen_ty_1>())).virt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type__bindgen_ty_1),
            "::",
            stringify!(virt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type__bindgen_ty_1>())).tparam as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type__bindgen_ty_1),
            "::",
            stringify!(tparam)
        )
    );
}
#[test]
fn bindgen_test_layout_hl_type() {
    assert_eq!(
        ::std::mem::size_of::<hl_type>(),
        32usize,
        concat!("Size of: ", stringify!(hl_type))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_type>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_type))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type>())).kind as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type>())).vobj_proto as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type),
            "::",
            stringify!(vobj_proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type>())).mark_bits as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type),
            "::",
            stringify!(mark_bits)
        )
    );
}
extern "C" {
    pub fn hl_type_size(t: *mut hl_type) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_pad_struct(size: ::std::os::raw::c_int, t: *mut hl_type) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_get_obj_rt(ot: *mut hl_type) -> *mut hl_runtime_obj;
}
extern "C" {
    pub fn hl_get_obj_proto(ot: *mut hl_type) -> *mut hl_runtime_obj;
}
extern "C" {
    pub fn hl_flush_proto(ot: *mut hl_type);
}
extern "C" {
    pub fn hl_init_enum(et: *mut hl_type, m: *mut hl_module_context);
}
pub type vbyte = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vdynamic {
    pub t: *mut hl_type,
    pub v: vdynamic__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vdynamic__bindgen_ty_1 {
    pub b: bool_,
    pub ui8: ::std::os::raw::c_uchar,
    pub ui16: ::std::os::raw::c_ushort,
    pub i: ::std::os::raw::c_int,
    pub f: f32,
    pub d: f64,
    pub bytes: *mut vbyte,
    pub ptr: *mut ::std::os::raw::c_void,
    pub i64: int64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_vdynamic__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<vdynamic__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(vdynamic__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<vdynamic__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(vdynamic__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynamic__bindgen_ty_1>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynamic__bindgen_ty_1),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynamic__bindgen_ty_1>())).ui8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynamic__bindgen_ty_1),
            "::",
            stringify!(ui8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynamic__bindgen_ty_1>())).ui16 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynamic__bindgen_ty_1),
            "::",
            stringify!(ui16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynamic__bindgen_ty_1>())).i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynamic__bindgen_ty_1),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynamic__bindgen_ty_1>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynamic__bindgen_ty_1),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynamic__bindgen_ty_1>())).d as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynamic__bindgen_ty_1),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynamic__bindgen_ty_1>())).bytes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynamic__bindgen_ty_1),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynamic__bindgen_ty_1>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynamic__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynamic__bindgen_ty_1>())).i64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynamic__bindgen_ty_1),
            "::",
            stringify!(i64)
        )
    );
}
#[test]
fn bindgen_test_layout_vdynamic() {
    assert_eq!(
        ::std::mem::size_of::<vdynamic>(),
        16usize,
        concat!("Size of: ", stringify!(vdynamic))
    );
    assert_eq!(
        ::std::mem::align_of::<vdynamic>(),
        8usize,
        concat!("Alignment of ", stringify!(vdynamic))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynamic>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynamic),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynamic>())).v as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynamic),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vobj {
    pub t: *mut hl_type,
}
#[test]
fn bindgen_test_layout_vobj() {
    assert_eq!(
        ::std::mem::size_of::<vobj>(),
        8usize,
        concat!("Size of: ", stringify!(vobj))
    );
    assert_eq!(
        ::std::mem::align_of::<vobj>(),
        8usize,
        concat!("Alignment of ", stringify!(vobj))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vobj>())).t as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(vobj), "::", stringify!(t))
    );
}
pub type vvirtual = _vvirtual;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vvirtual {
    pub t: *mut hl_type,
    pub value: *mut vdynamic,
    pub next: *mut vvirtual,
}
#[test]
fn bindgen_test_layout__vvirtual() {
    assert_eq!(
        ::std::mem::size_of::<_vvirtual>(),
        24usize,
        concat!("Size of: ", stringify!(_vvirtual))
    );
    assert_eq!(
        ::std::mem::align_of::<_vvirtual>(),
        8usize,
        concat!("Alignment of ", stringify!(_vvirtual))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_vvirtual>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_vvirtual),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_vvirtual>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_vvirtual),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_vvirtual>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_vvirtual),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct varray {
    pub t: *mut hl_type,
    pub at: *mut hl_type,
    pub size: ::std::os::raw::c_int,
    pub __pad: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_varray() {
    assert_eq!(
        ::std::mem::size_of::<varray>(),
        24usize,
        concat!("Size of: ", stringify!(varray))
    );
    assert_eq!(
        ::std::mem::align_of::<varray>(),
        8usize,
        concat!("Alignment of ", stringify!(varray))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<varray>())).t as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(varray), "::", stringify!(t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<varray>())).at as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(varray),
            "::",
            stringify!(at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<varray>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(varray),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<varray>())).__pad as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(varray),
            "::",
            stringify!(__pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vclosure {
    pub t: *mut hl_type,
    pub fun: *mut ::std::os::raw::c_void,
    pub hasValue: ::std::os::raw::c_int,
    pub __pad: ::std::os::raw::c_int,
    pub value: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__vclosure() {
    assert_eq!(
        ::std::mem::size_of::<_vclosure>(),
        32usize,
        concat!("Size of: ", stringify!(_vclosure))
    );
    assert_eq!(
        ::std::mem::align_of::<_vclosure>(),
        8usize,
        concat!("Alignment of ", stringify!(_vclosure))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_vclosure>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_vclosure),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_vclosure>())).fun as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_vclosure),
            "::",
            stringify!(fun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_vclosure>())).hasValue as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_vclosure),
            "::",
            stringify!(hasValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_vclosure>())).__pad as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_vclosure),
            "::",
            stringify!(__pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_vclosure>())).value as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_vclosure),
            "::",
            stringify!(value)
        )
    );
}
pub type vclosure = _vclosure;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vclosure_wrapper {
    pub cl: vclosure,
    pub wrappedFun: *mut vclosure,
}
#[test]
fn bindgen_test_layout_vclosure_wrapper() {
    assert_eq!(
        ::std::mem::size_of::<vclosure_wrapper>(),
        40usize,
        concat!("Size of: ", stringify!(vclosure_wrapper))
    );
    assert_eq!(
        ::std::mem::align_of::<vclosure_wrapper>(),
        8usize,
        concat!("Alignment of ", stringify!(vclosure_wrapper))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vclosure_wrapper>())).cl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vclosure_wrapper),
            "::",
            stringify!(cl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vclosure_wrapper>())).wrappedFun as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vclosure_wrapper),
            "::",
            stringify!(wrappedFun)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _hl_field_lookup {
    pub t: *mut hl_type,
    pub hashed_name: ::std::os::raw::c_int,
    pub field_index: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__hl_field_lookup() {
    assert_eq!(
        ::std::mem::size_of::<_hl_field_lookup>(),
        16usize,
        concat!("Size of: ", stringify!(_hl_field_lookup))
    );
    assert_eq!(
        ::std::mem::align_of::<_hl_field_lookup>(),
        8usize,
        concat!("Alignment of ", stringify!(_hl_field_lookup))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hl_field_lookup>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_hl_field_lookup),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hl_field_lookup>())).hashed_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_hl_field_lookup),
            "::",
            stringify!(hashed_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hl_field_lookup>())).field_index as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_hl_field_lookup),
            "::",
            stringify!(field_index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_runtime_binding {
    pub ptr: *mut ::std::os::raw::c_void,
    pub closure: *mut hl_type,
    pub fid: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_hl_runtime_binding() {
    assert_eq!(
        ::std::mem::size_of::<hl_runtime_binding>(),
        24usize,
        concat!("Size of: ", stringify!(hl_runtime_binding))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_runtime_binding>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_runtime_binding))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_binding>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_binding),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_binding>())).closure as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_binding),
            "::",
            stringify!(closure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_binding>())).fid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_binding),
            "::",
            stringify!(fid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_runtime_obj {
    pub t: *mut hl_type,
    pub nfields: ::std::os::raw::c_int,
    pub nproto: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub nmethods: ::std::os::raw::c_int,
    pub nbindings: ::std::os::raw::c_int,
    pub hasPtr: bool_,
    pub methods: *mut *mut ::std::os::raw::c_void,
    pub fields_indexes: *mut ::std::os::raw::c_int,
    pub bindings: *mut hl_runtime_binding,
    pub parent: *mut hl_runtime_obj,
    pub toStringFun:
        ::std::option::Option<unsafe extern "C" fn(obj: *mut vdynamic) -> *const uchar>,
    pub compareFun: ::std::option::Option<
        unsafe extern "C" fn(a: *mut vdynamic, b: *mut vdynamic) -> ::std::os::raw::c_int,
    >,
    pub castFun: ::std::option::Option<
        unsafe extern "C" fn(obj: *mut vdynamic, t: *mut hl_type) -> *mut vdynamic,
    >,
    pub getFieldFun: ::std::option::Option<
        unsafe extern "C" fn(obj: *mut vdynamic, hfield: ::std::os::raw::c_int) -> *mut vdynamic,
    >,
    pub nlookup: ::std::os::raw::c_int,
    pub lookup: *mut hl_field_lookup,
}
#[test]
fn bindgen_test_layout_hl_runtime_obj() {
    assert_eq!(
        ::std::mem::size_of::<hl_runtime_obj>(),
        112usize,
        concat!("Size of: ", stringify!(hl_runtime_obj))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_runtime_obj>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_runtime_obj))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).nfields as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(nfields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).nproto as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(nproto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).nmethods as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(nmethods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).nbindings as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(nbindings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).hasPtr as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(hasPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).methods as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(methods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).fields_indexes as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(fields_indexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).bindings as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(bindings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).parent as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).toStringFun as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(toStringFun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).compareFun as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(compareFun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).castFun as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(castFun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).getFieldFun as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(getFieldFun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).nlookup as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(nlookup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).lookup as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(lookup)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vdynobj {
    pub t: *mut hl_type,
    pub lookup: *mut hl_field_lookup,
    pub raw_data: *mut ::std::os::raw::c_char,
    pub values: *mut *mut ::std::os::raw::c_void,
    pub nfields: ::std::os::raw::c_int,
    pub raw_size: ::std::os::raw::c_int,
    pub nvalues: ::std::os::raw::c_int,
    pub virtuals: *mut vvirtual,
}
#[test]
fn bindgen_test_layout_vdynobj() {
    assert_eq!(
        ::std::mem::size_of::<vdynobj>(),
        56usize,
        concat!("Size of: ", stringify!(vdynobj))
    );
    assert_eq!(
        ::std::mem::align_of::<vdynobj>(),
        8usize,
        concat!("Alignment of ", stringify!(vdynobj))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynobj>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynobj),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynobj>())).lookup as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynobj),
            "::",
            stringify!(lookup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynobj>())).raw_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynobj),
            "::",
            stringify!(raw_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynobj>())).values as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynobj),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynobj>())).nfields as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynobj),
            "::",
            stringify!(nfields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynobj>())).raw_size as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynobj),
            "::",
            stringify!(raw_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynobj>())).nvalues as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynobj),
            "::",
            stringify!(nvalues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynobj>())).virtuals as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynobj),
            "::",
            stringify!(virtuals)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _venum {
    pub t: *mut hl_type,
    pub index: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__venum() {
    assert_eq!(
        ::std::mem::size_of::<_venum>(),
        16usize,
        concat!("Size of: ", stringify!(_venum))
    );
    assert_eq!(
        ::std::mem::align_of::<_venum>(),
        8usize,
        concat!("Alignment of ", stringify!(_venum))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_venum>())).t as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_venum), "::", stringify!(t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_venum>())).index as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_venum),
            "::",
            stringify!(index)
        )
    );
}
pub type venum = _venum;
extern "C" {
    pub static mut hlt_void: hl_type;
}
extern "C" {
    pub static mut hlt_i32: hl_type;
}
extern "C" {
    pub static mut hlt_i64: hl_type;
}
extern "C" {
    pub static mut hlt_f64: hl_type;
}
extern "C" {
    pub static mut hlt_f32: hl_type;
}
extern "C" {
    pub static mut hlt_dyn: hl_type;
}
extern "C" {
    pub static mut hlt_array: hl_type;
}
extern "C" {
    pub static mut hlt_bytes: hl_type;
}
extern "C" {
    pub static mut hlt_dynobj: hl_type;
}
extern "C" {
    pub static mut hlt_bool: hl_type;
}
extern "C" {
    pub static mut hlt_abstract: hl_type;
}
extern "C" {
    pub fn hl_nan() -> f64;
}
extern "C" {
    pub fn hl_is_dynamic(t: *mut hl_type) -> bool_;
}
extern "C" {
    pub fn hl_same_type(a: *mut hl_type, b: *mut hl_type) -> bool_;
}
extern "C" {
    pub fn hl_safe_cast(t: *mut hl_type, to: *mut hl_type) -> bool_;
}
extern "C" {
    pub fn hl_alloc_array(t: *mut hl_type, size: ::std::os::raw::c_int) -> *mut varray;
}
extern "C" {
    pub fn hl_alloc_dynamic(t: *mut hl_type) -> *mut vdynamic;
}
extern "C" {
    pub fn hl_alloc_dynbool(b: bool_) -> *mut vdynamic;
}
extern "C" {
    pub fn hl_alloc_obj(t: *mut hl_type) -> *mut vdynamic;
}
extern "C" {
    pub fn hl_alloc_enum(t: *mut hl_type, index: ::std::os::raw::c_int) -> *mut venum;
}
extern "C" {
    pub fn hl_alloc_virtual(t: *mut hl_type) -> *mut vvirtual;
}
extern "C" {
    pub fn hl_alloc_dynobj() -> *mut vdynobj;
}
extern "C" {
    pub fn hl_alloc_bytes(size: ::std::os::raw::c_int) -> *mut vbyte;
}
extern "C" {
    pub fn hl_copy_bytes(byte: *const vbyte, size: ::std::os::raw::c_int) -> *mut vbyte;
}
extern "C" {
    pub fn hl_utf8_length(s: *const vbyte, pos: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_from_utf8(
        out: *mut uchar,
        outLen: ::std::os::raw::c_int,
        str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_to_utf8(bytes: *const uchar) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn hl_to_utf16(str: *const ::std::os::raw::c_char) -> *mut uchar;
}
extern "C" {
    pub fn hl_virtual_make_value(v: *mut vvirtual) -> *mut vdynamic;
}
extern "C" {
    pub fn hl_obj_field_fetch(t: *mut hl_type, fid: ::std::os::raw::c_int) -> *mut hl_obj_field;
}
extern "C" {
    pub fn hl_hash(name: *mut vbyte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_hash_utf8(str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_hash_gen(name: *const uchar, cache_name: bool_) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_field_name(hash: ::std::os::raw::c_int) -> *mut vbyte;
}
extern "C" {
    pub fn hl_alloc_strbytes(msg: *const uchar, ...) -> *mut vdynamic;
}
extern "C" {
    pub fn hl_assert();
}
extern "C" {
    pub fn hl_throw(v: *mut vdynamic);
}
extern "C" {
    pub fn hl_rethrow(v: *mut vdynamic);
}
extern "C" {
    pub fn hl_null_access();
}
extern "C" {
    pub fn hl_setup_longjump(j: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn hl_setup_exception(
        resolve_symbol: *mut ::std::os::raw::c_void,
        capture_stack: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn hl_dump_stack();
}
extern "C" {
    pub fn hl_exception_stack() -> *mut varray;
}
extern "C" {
    pub fn hl_detect_debugger() -> bool_;
}
extern "C" {
    pub fn hl_to_virtual(vt: *mut hl_type, obj: *mut vdynamic) -> *mut vvirtual;
}
extern "C" {
    pub fn hl_init_virtual(vt: *mut hl_type, ctx: *mut hl_module_context);
}
extern "C" {
    pub fn hl_lookup_find(
        l: *mut hl_field_lookup,
        size: ::std::os::raw::c_int,
        hash: ::std::os::raw::c_int,
    ) -> *mut hl_field_lookup;
}
extern "C" {
    pub fn hl_lookup_insert(
        l: *mut hl_field_lookup,
        size: ::std::os::raw::c_int,
        hash: ::std::os::raw::c_int,
        t: *mut hl_type,
        index: ::std::os::raw::c_int,
    ) -> *mut hl_field_lookup;
}
extern "C" {
    pub fn hl_dyn_geti(
        d: *mut vdynamic,
        hfield: ::std::os::raw::c_int,
        t: *mut hl_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_dyn_getp(
        d: *mut vdynamic,
        hfield: ::std::os::raw::c_int,
        t: *mut hl_type,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_dyn_getf(d: *mut vdynamic, hfield: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn hl_dyn_getd(d: *mut vdynamic, hfield: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn hl_dyn_casti(
        data: *mut ::std::os::raw::c_void,
        t: *mut hl_type,
        to: *mut hl_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_dyn_castp(
        data: *mut ::std::os::raw::c_void,
        t: *mut hl_type,
        to: *mut hl_type,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_dyn_castf(data: *mut ::std::os::raw::c_void, t: *mut hl_type) -> f32;
}
extern "C" {
    pub fn hl_dyn_castd(data: *mut ::std::os::raw::c_void, t: *mut hl_type) -> f64;
}
extern "C" {
    pub fn hl_dyn_compare(a: *mut vdynamic, b: *mut vdynamic) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_make_dyn(data: *mut ::std::os::raw::c_void, t: *mut hl_type) -> *mut vdynamic;
}
extern "C" {
    pub fn hl_write_dyn(
        data: *mut ::std::os::raw::c_void,
        t: *mut hl_type,
        v: *mut vdynamic,
        is_tmp: bool_,
    );
}
extern "C" {
    pub fn hl_dyn_seti(
        d: *mut vdynamic,
        hfield: ::std::os::raw::c_int,
        t: *mut hl_type,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn hl_dyn_setp(
        d: *mut vdynamic,
        hfield: ::std::os::raw::c_int,
        t: *mut hl_type,
        ptr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn hl_dyn_setf(d: *mut vdynamic, hfield: ::std::os::raw::c_int, f: f32);
}
extern "C" {
    pub fn hl_dyn_setd(d: *mut vdynamic, hfield: ::std::os::raw::c_int, v: f64);
}
pub const DynOp_OpAdd: DynOp = 0;
pub const DynOp_OpSub: DynOp = 1;
pub const DynOp_OpMul: DynOp = 2;
pub const DynOp_OpMod: DynOp = 3;
pub const DynOp_OpDiv: DynOp = 4;
pub const DynOp_OpShl: DynOp = 5;
pub const DynOp_OpShr: DynOp = 6;
pub const DynOp_OpUShr: DynOp = 7;
pub const DynOp_OpAnd: DynOp = 8;
pub const DynOp_OpOr: DynOp = 9;
pub const DynOp_OpXor: DynOp = 10;
pub const DynOp_OpLast: DynOp = 11;
pub type DynOp = i32;
extern "C" {
    pub fn hl_dyn_op(
        op: ::std::os::raw::c_int,
        a: *mut vdynamic,
        b: *mut vdynamic,
    ) -> *mut vdynamic;
}
extern "C" {
    pub fn hl_alloc_closure_void(
        t: *mut hl_type,
        fvalue: *mut ::std::os::raw::c_void,
    ) -> *mut vclosure;
}
extern "C" {
    pub fn hl_alloc_closure_ptr(
        fullt: *mut hl_type,
        fvalue: *mut ::std::os::raw::c_void,
        ptr: *mut ::std::os::raw::c_void,
    ) -> *mut vclosure;
}
extern "C" {
    pub fn hl_make_fun_wrapper(c: *mut vclosure, to: *mut hl_type) -> *mut vclosure;
}
extern "C" {
    pub fn hl_wrapper_call(
        value: *mut ::std::os::raw::c_void,
        args: *mut *mut ::std::os::raw::c_void,
        ret: *mut vdynamic,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_dyn_call_obj(
        obj: *mut vdynamic,
        ft: *mut hl_type,
        hfield: ::std::os::raw::c_int,
        args: *mut *mut ::std::os::raw::c_void,
        ret: *mut vdynamic,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_dyn_call(
        c: *mut vclosure,
        args: *mut *mut vdynamic,
        nargs: ::std::os::raw::c_int,
    ) -> *mut vdynamic;
}
extern "C" {
    pub fn hl_dyn_call_safe(
        c: *mut vclosure,
        args: *mut *mut vdynamic,
        nargs: ::std::os::raw::c_int,
        isException: *mut bool_,
    ) -> *mut vdynamic;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _hl_thread {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _hl_mutex {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _hl_tls {
    _unused: [u8; 0],
}
pub type hl_thread = _hl_thread;
pub type hl_mutex = _hl_mutex;
pub type hl_tls = _hl_tls;
extern "C" {
    pub fn hl_thread_start(
        callback: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_void,
        withGC: bool_,
    ) -> *mut hl_thread;
}
extern "C" {
    pub fn hl_thread_current() -> *mut hl_thread;
}
extern "C" {
    pub fn hl_thread_yield();
}
extern "C" {
    pub fn hl_register_thread(stack_top: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn hl_unregister_thread();
}
extern "C" {
    pub fn hl_mutex_alloc(gc_thread: bool_) -> *mut hl_mutex;
}
extern "C" {
    pub fn hl_mutex_acquire(l: *mut hl_mutex);
}
extern "C" {
    pub fn hl_mutex_try_acquire(l: *mut hl_mutex) -> bool_;
}
extern "C" {
    pub fn hl_mutex_release(l: *mut hl_mutex);
}
extern "C" {
    pub fn hl_mutex_free(l: *mut hl_mutex);
}
extern "C" {
    pub fn hl_tls_alloc(gc_value: bool_) -> *mut hl_tls;
}
extern "C" {
    pub fn hl_tls_set(l: *mut hl_tls, value: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn hl_tls_get(l: *mut hl_tls) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_tls_free(l: *mut hl_tls);
}
extern "C" {
    pub fn hl_gc_alloc_gen(
        t: *mut hl_type,
        size: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_add_root(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn hl_remove_root(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn hl_gc_major();
}
extern "C" {
    pub fn hl_is_gc_ptr(ptr: *mut ::std::os::raw::c_void) -> bool_;
}
extern "C" {
    pub fn hl_blocking(b: bool_);
}
extern "C" {
    pub fn hl_is_blocking() -> bool_;
}
pub type hl_types_dump = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_int),
        >,
    ),
>;
extern "C" {
    pub fn hl_gc_set_dump_types(tdump: hl_types_dump);
}
extern "C" {
    pub fn hl_alloc_init(a: *mut hl_alloc);
}
extern "C" {
    pub fn hl_malloc(a: *mut hl_alloc, size: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_zalloc(a: *mut hl_alloc, size: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_free(a: *mut hl_alloc);
}
extern "C" {
    pub fn hl_global_init();
}
extern "C" {
    pub fn hl_global_free();
}
extern "C" {
    pub fn hl_alloc_executable_memory(size: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_free_executable_memory(ptr: *mut ::std::os::raw::c_void, size: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_buffer {
    _unused: [u8; 0],
}
extern "C" {
    pub fn hl_alloc_buffer() -> *mut hl_buffer;
}
extern "C" {
    pub fn hl_buffer_val(b: *mut hl_buffer, v: *mut vdynamic);
}
extern "C" {
    pub fn hl_buffer_char(b: *mut hl_buffer, c: uchar);
}
extern "C" {
    pub fn hl_buffer_str(b: *mut hl_buffer, str: *const uchar);
}
extern "C" {
    pub fn hl_buffer_cstr(b: *mut hl_buffer, str: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn hl_buffer_str_sub(b: *mut hl_buffer, str: *const uchar, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn hl_buffer_length(b: *mut hl_buffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_buffer_content(b: *mut hl_buffer, len: *mut ::std::os::raw::c_int) -> *mut uchar;
}
extern "C" {
    pub fn hl_to_string(v: *mut vdynamic) -> *mut uchar;
}
extern "C" {
    pub fn hl_type_str(t: *mut hl_type) -> *const uchar;
}
extern "C" {
    pub fn hl_throw_buffer(b: *mut hl_buffer);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vstring {
    pub t: *mut hl_type,
    pub bytes: *mut uchar,
    pub length: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_vstring() {
    assert_eq!(
        ::std::mem::size_of::<vstring>(),
        24usize,
        concat!("Size of: ", stringify!(vstring))
    );
    assert_eq!(
        ::std::mem::align_of::<vstring>(),
        8usize,
        concat!("Alignment of ", stringify!(vstring))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vstring>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vstring),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vstring>())).bytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vstring),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vstring>())).length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vstring),
            "::",
            stringify!(length)
        )
    );
}
extern "C" {
    pub fn hl_fatal_error(
        msg: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_fatal_fmt(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn hl_sys_init(
        args: *mut *mut ::std::os::raw::c_void,
        nargs: ::std::os::raw::c_int,
        hlfile: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn hl_setup_callbacks(sc: *mut ::std::os::raw::c_void, gw: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn hl_setup_reload_check(
        freload: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SETJMP_FLOAT128 {
    pub Part: [::std::os::raw::c_ulonglong; 2usize],
}
#[test]
fn bindgen_test_layout__SETJMP_FLOAT128() {
    assert_eq!(
        ::std::mem::size_of::<_SETJMP_FLOAT128>(),
        16usize,
        concat!("Size of: ", stringify!(_SETJMP_FLOAT128))
    );
    assert_eq!(
        ::std::mem::align_of::<_SETJMP_FLOAT128>(),
        16usize,
        concat!("Alignment of ", stringify!(_SETJMP_FLOAT128))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SETJMP_FLOAT128>())).Part as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SETJMP_FLOAT128),
            "::",
            stringify!(Part)
        )
    );
}
pub type SETJMP_FLOAT128 = _SETJMP_FLOAT128;
pub type _JBTYPE = SETJMP_FLOAT128;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _JUMP_BUFFER {
    pub Frame: ::std::os::raw::c_ulonglong,
    pub Rbx: ::std::os::raw::c_ulonglong,
    pub Rsp: ::std::os::raw::c_ulonglong,
    pub Rbp: ::std::os::raw::c_ulonglong,
    pub Rsi: ::std::os::raw::c_ulonglong,
    pub Rdi: ::std::os::raw::c_ulonglong,
    pub R12: ::std::os::raw::c_ulonglong,
    pub R13: ::std::os::raw::c_ulonglong,
    pub R14: ::std::os::raw::c_ulonglong,
    pub R15: ::std::os::raw::c_ulonglong,
    pub Rip: ::std::os::raw::c_ulonglong,
    pub MxCsr: ::std::os::raw::c_ulong,
    pub FpCsr: ::std::os::raw::c_ushort,
    pub Spare: ::std::os::raw::c_ushort,
    pub Xmm6: SETJMP_FLOAT128,
    pub Xmm7: SETJMP_FLOAT128,
    pub Xmm8: SETJMP_FLOAT128,
    pub Xmm9: SETJMP_FLOAT128,
    pub Xmm10: SETJMP_FLOAT128,
    pub Xmm11: SETJMP_FLOAT128,
    pub Xmm12: SETJMP_FLOAT128,
    pub Xmm13: SETJMP_FLOAT128,
    pub Xmm14: SETJMP_FLOAT128,
    pub Xmm15: SETJMP_FLOAT128,
}
#[test]
fn bindgen_test_layout__JUMP_BUFFER() {
    assert_eq!(
        ::std::mem::size_of::<_JUMP_BUFFER>(),
        256usize,
        concat!("Size of: ", stringify!(_JUMP_BUFFER))
    );
    assert_eq!(
        ::std::mem::align_of::<_JUMP_BUFFER>(),
        16usize,
        concat!("Alignment of ", stringify!(_JUMP_BUFFER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).Frame as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).Rbx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Rbx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).Rsp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Rsp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).Rbp as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Rbp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).Rsi as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Rsi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).Rdi as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Rdi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).R12 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(R12)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).R13 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(R13)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).R14 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(R14)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).R15 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(R15)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).Rip as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Rip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).MxCsr as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(MxCsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).FpCsr as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(FpCsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).Spare as *const _ as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Spare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).Xmm6 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Xmm6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).Xmm7 as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Xmm7)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).Xmm8 as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Xmm8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).Xmm9 as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Xmm9)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).Xmm10 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Xmm10)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).Xmm11 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Xmm11)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).Xmm12 as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Xmm12)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).Xmm13 as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Xmm13)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).Xmm14 as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Xmm14)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_JUMP_BUFFER>())).Xmm15 as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Xmm15)
        )
    );
}
pub type jmp_buf = [_JBTYPE; 16usize];
extern "C" {
    pub fn _setjmp(_Buf: *mut _JBTYPE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(_Buf: *mut _JBTYPE, _Value: ::std::os::raw::c_int);
}
pub type hl_trap_ctx = _hl_trap_ctx;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _hl_trap_ctx {
    pub buf: jmp_buf,
    pub prev: *mut hl_trap_ctx,
    pub tcheck: *mut vdynamic,
}
#[test]
fn bindgen_test_layout__hl_trap_ctx() {
    assert_eq!(
        ::std::mem::size_of::<_hl_trap_ctx>(),
        272usize,
        concat!("Size of: ", stringify!(_hl_trap_ctx))
    );
    assert_eq!(
        ::std::mem::align_of::<_hl_trap_ctx>(),
        16usize,
        concat!("Alignment of ", stringify!(_hl_trap_ctx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hl_trap_ctx>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_hl_trap_ctx),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hl_trap_ctx>())).prev as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_hl_trap_ctx),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hl_trap_ctx>())).tcheck as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_hl_trap_ctx),
            "::",
            stringify!(tcheck)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct hl_thread_info {
    pub thread_id: ::std::os::raw::c_int,
    pub gc_blocking: ::std::os::raw::c_int,
    pub stack_top: *mut ::std::os::raw::c_void,
    pub stack_cur: *mut ::std::os::raw::c_void,
    pub trap_current: *mut hl_trap_ctx,
    pub trap_uncaught: *mut hl_trap_ctx,
    pub exc_handler: *mut vclosure,
    pub exc_value: *mut vdynamic,
    pub flags: ::std::os::raw::c_int,
    pub exc_stack_count: ::std::os::raw::c_int,
    pub gc_regs: jmp_buf,
    pub exc_stack_trace: [*mut ::std::os::raw::c_void; 256usize],
}
#[test]
fn bindgen_test_layout_hl_thread_info() {
    assert_eq!(
        ::std::mem::size_of::<hl_thread_info>(),
        2368usize,
        concat!("Size of: ", stringify!(hl_thread_info))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_thread_info>(),
        16usize,
        concat!("Alignment of ", stringify!(hl_thread_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).thread_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(thread_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).gc_blocking as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(gc_blocking)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).stack_top as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(stack_top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).stack_cur as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(stack_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).trap_current as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(trap_current)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).trap_uncaught as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(trap_uncaught)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).exc_handler as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(exc_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).exc_value as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(exc_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).flags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).exc_stack_count as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(exc_stack_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).gc_regs as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(gc_regs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).exc_stack_trace as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(exc_stack_trace)
        )
    );
}
extern "C" {
    pub fn hl_get_thread() -> *mut hl_thread_info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_track_info {
    pub flags: ::std::os::raw::c_int,
    pub on_alloc: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut hl_type,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut ::std::os::raw::c_void,
        ),
    >,
    pub on_cast:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut hl_type, arg2: *mut hl_type)>,
    pub on_dynfield: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut vdynamic, arg2: ::std::os::raw::c_int),
    >,
    pub on_dyncall: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut vdynamic, arg2: ::std::os::raw::c_int),
    >,
}
#[test]
fn bindgen_test_layout_hl_track_info() {
    assert_eq!(
        ::std::mem::size_of::<hl_track_info>(),
        40usize,
        concat!("Size of: ", stringify!(hl_track_info))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_track_info>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_track_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_track_info>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_track_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_track_info>())).on_alloc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_track_info),
            "::",
            stringify!(on_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_track_info>())).on_cast as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_track_info),
            "::",
            stringify!(on_cast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_track_info>())).on_dynfield as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_track_info),
            "::",
            stringify!(on_dynfield)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_track_info>())).on_dyncall as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_track_info),
            "::",
            stringify!(on_dyncall)
        )
    );
}
extern "C" {
    pub static mut hl_track: hl_track_info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout__exception() {
    assert_eq!(
        ::std::mem::size_of::<_exception>(),
        40usize,
        concat!("Size of: ", stringify!(_exception))
    );
    assert_eq!(
        ::std::mem::align_of::<_exception>(),
        8usize,
        concat!("Alignment of ", stringify!(_exception))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_exception>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_exception>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_exception>())).arg1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(arg1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_exception>())).arg2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(arg2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_exception>())).retval as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(retval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _complex {
    pub x: f64,
    pub y: f64,
}
#[test]
fn bindgen_test_layout__complex() {
    assert_eq!(
        ::std::mem::size_of::<_complex>(),
        16usize,
        concat!("Size of: ", stringify!(_complex))
    );
    assert_eq!(
        ::std::mem::align_of::<_complex>(),
        8usize,
        concat!("Alignment of ", stringify!(_complex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_complex>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_complex),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_complex>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_complex),
            "::",
            stringify!(y)
        )
    );
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub static _HUGE: f64;
}
extern "C" {
    pub fn _fperrraise(_Except: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _dclass(_X: f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldclass(_X: f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdclass(_X: f32) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dsign(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ldsign(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdsign(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _dpcomp(_X: f64, _Y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ldpcomp(_X: f64, _Y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdpcomp(_X: f32, _Y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _dtest(_Px: *mut f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldtest(_Px: *mut f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdtest(_Px: *mut f32) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _d_int(_Px: *mut f64, _Xexp: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ld_int(_Px: *mut f64, _Xexp: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fd_int(_Px: *mut f32, _Xexp: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dscale(_Px: *mut f64, _Lexp: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldscale(_Px: *mut f64, _Lexp: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdscale(_Px: *mut f32, _Lexp: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dunscale(_Pex: *mut ::std::os::raw::c_short, _Px: *mut f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldunscale(_Pex: *mut ::std::os::raw::c_short, _Px: *mut f64)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdunscale(_Pex: *mut ::std::os::raw::c_short, _Px: *mut f32)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dexp(_Px: *mut f64, _Y: f64, _Eoff: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldexp(_Px: *mut f64, _Y: f64, _Eoff: ::std::os::raw::c_long)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdexp(_Px: *mut f32, _Y: f32, _Eoff: ::std::os::raw::c_long)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dnorm(_Ps: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdnorm(_Ps: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dpoly(_X: f64, _Tab: *const f64, _N: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _ldpoly(_X: f64, _Tab: *const f64, _N: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _fdpoly(_X: f32, _Tab: *const f32, _N: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn _dlog(_X: f64, _Baseflag: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _ldlog(_X: f64, _Baseflag: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _fdlog(_X: f32, _Baseflag: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn _dsin(_X: f64, _Qoff: ::std::os::raw::c_uint) -> f64;
}
extern "C" {
    pub fn _ldsin(_X: f64, _Qoff: ::std::os::raw::c_uint) -> f64;
}
extern "C" {
    pub fn _fdsin(_X: f32, _Qoff: ::std::os::raw::c_uint) -> f32;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _double_val {
    pub _Sh: [::std::os::raw::c_ushort; 4usize],
    pub _Val: f64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__double_val() {
    assert_eq!(
        ::std::mem::size_of::<_double_val>(),
        8usize,
        concat!("Size of: ", stringify!(_double_val))
    );
    assert_eq!(
        ::std::mem::align_of::<_double_val>(),
        8usize,
        concat!("Alignment of ", stringify!(_double_val))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_double_val>()))._Sh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_double_val),
            "::",
            stringify!(_Sh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_double_val>()))._Val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_double_val),
            "::",
            stringify!(_Val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _float_val {
    pub _Sh: [::std::os::raw::c_ushort; 2usize],
    pub _Val: f32,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout__float_val() {
    assert_eq!(
        ::std::mem::size_of::<_float_val>(),
        4usize,
        concat!("Size of: ", stringify!(_float_val))
    );
    assert_eq!(
        ::std::mem::align_of::<_float_val>(),
        4usize,
        concat!("Alignment of ", stringify!(_float_val))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_val>()))._Sh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_val),
            "::",
            stringify!(_Sh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_val>()))._Val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_val),
            "::",
            stringify!(_Val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ldouble_val {
    pub _Sh: [::std::os::raw::c_ushort; 4usize],
    pub _Val: f64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__ldouble_val() {
    assert_eq!(
        ::std::mem::size_of::<_ldouble_val>(),
        8usize,
        concat!("Size of: ", stringify!(_ldouble_val))
    );
    assert_eq!(
        ::std::mem::align_of::<_ldouble_val>(),
        8usize,
        concat!("Alignment of ", stringify!(_ldouble_val))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldouble_val>()))._Sh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldouble_val),
            "::",
            stringify!(_Sh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldouble_val>()))._Val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldouble_val),
            "::",
            stringify!(_Val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _float_const {
    pub _Word: [::std::os::raw::c_ushort; 4usize],
    pub _Float: f32,
    pub _Double: f64,
    pub _Long_double: f64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__float_const() {
    assert_eq!(
        ::std::mem::size_of::<_float_const>(),
        8usize,
        concat!("Size of: ", stringify!(_float_const))
    );
    assert_eq!(
        ::std::mem::align_of::<_float_const>(),
        8usize,
        concat!("Alignment of ", stringify!(_float_const))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_const>()))._Word as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_const),
            "::",
            stringify!(_Word)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_const>()))._Float as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_const),
            "::",
            stringify!(_Float)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_const>()))._Double as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_const),
            "::",
            stringify!(_Double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_const>()))._Long_double as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_const),
            "::",
            stringify!(_Long_double)
        )
    );
}
extern "C" {
    pub static _Denorm_C: _float_const;
}
extern "C" {
    pub static _Inf_C: _float_const;
}
extern "C" {
    pub static _Nan_C: _float_const;
}
extern "C" {
    pub static _Snan_C: _float_const;
}
extern "C" {
    pub static _Hugeval_C: _float_const;
}
extern "C" {
    pub static _FDenorm_C: _float_const;
}
extern "C" {
    pub static _FInf_C: _float_const;
}
extern "C" {
    pub static _FNan_C: _float_const;
}
extern "C" {
    pub static _FSnan_C: _float_const;
}
extern "C" {
    pub static _LDenorm_C: _float_const;
}
extern "C" {
    pub static _LInf_C: _float_const;
}
extern "C" {
    pub static _LNan_C: _float_const;
}
extern "C" {
    pub static _LSnan_C: _float_const;
}
extern "C" {
    pub static _Eps_C: _float_const;
}
extern "C" {
    pub static _Rteps_C: _float_const;
}
extern "C" {
    pub static _FEps_C: _float_const;
}
extern "C" {
    pub static _FRteps_C: _float_const;
}
extern "C" {
    pub static _LEps_C: _float_const;
}
extern "C" {
    pub static _LRteps_C: _float_const;
}
extern "C" {
    pub static _Zero_C: f64;
}
extern "C" {
    pub static _Xbig_C: f64;
}
extern "C" {
    pub static _FZero_C: f32;
}
extern "C" {
    pub static _FXbig_C: f32;
}
extern "C" {
    pub static _LZero_C: f64;
}
extern "C" {
    pub static _LXbig_C: f64;
}
extern "C" {
    pub fn acos(_X: f64) -> f64;
}
extern "C" {
    pub fn asin(_X: f64) -> f64;
}
extern "C" {
    pub fn atan(_X: f64) -> f64;
}
extern "C" {
    pub fn atan2(_Y: f64, _X: f64) -> f64;
}
extern "C" {
    pub fn cos(_X: f64) -> f64;
}
extern "C" {
    pub fn cosh(_X: f64) -> f64;
}
extern "C" {
    pub fn exp(_X: f64) -> f64;
}
extern "C" {
    pub fn fabs(_X: f64) -> f64;
}
extern "C" {
    pub fn fmod(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn log(_X: f64) -> f64;
}
extern "C" {
    pub fn log10(_X: f64) -> f64;
}
extern "C" {
    pub fn pow(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn sin(_X: f64) -> f64;
}
extern "C" {
    pub fn sinh(_X: f64) -> f64;
}
extern "C" {
    pub fn sqrt(_X: f64) -> f64;
}
extern "C" {
    pub fn tan(_X: f64) -> f64;
}
extern "C" {
    pub fn tanh(_X: f64) -> f64;
}
extern "C" {
    pub fn acosh(_X: f64) -> f64;
}
extern "C" {
    pub fn asinh(_X: f64) -> f64;
}
extern "C" {
    pub fn atanh(_X: f64) -> f64;
}
extern "C" {
    pub fn _cabs(_Complex_value: _complex) -> f64;
}
extern "C" {
    pub fn cbrt(_X: f64) -> f64;
}
extern "C" {
    pub fn ceil(_X: f64) -> f64;
}
extern "C" {
    pub fn _chgsign(_X: f64) -> f64;
}
extern "C" {
    pub fn copysign(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn _copysign(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn erf(_X: f64) -> f64;
}
extern "C" {
    pub fn erfc(_X: f64) -> f64;
}
extern "C" {
    pub fn exp2(_X: f64) -> f64;
}
extern "C" {
    pub fn expm1(_X: f64) -> f64;
}
extern "C" {
    pub fn fdim(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn floor(_X: f64) -> f64;
}
extern "C" {
    pub fn fma(_X: f64, _Y: f64, _Z: f64) -> f64;
}
extern "C" {
    pub fn fmax(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn fmin(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn frexp(_X: f64, _Y: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn hypot(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn _hypot(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn ilogb(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldexp(_X: f64, _Y: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lgamma(_X: f64) -> f64;
}
extern "C" {
    pub fn llrint(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llround(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn log1p(_X: f64) -> f64;
}
extern "C" {
    pub fn log2(_X: f64) -> f64;
}
extern "C" {
    pub fn logb(_X: f64) -> f64;
}
extern "C" {
    pub fn lrint(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lround(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _matherr(_Except: *mut _exception) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modf(_X: f64, _Y: *mut f64) -> f64;
}
extern "C" {
    pub fn nan(_X: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nearbyint(_X: f64) -> f64;
}
extern "C" {
    pub fn nextafter(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remainder(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remquo(_X: f64, _Y: f64, _Z: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(_X: f64) -> f64;
}
extern "C" {
    pub fn round(_X: f64) -> f64;
}
extern "C" {
    pub fn scalbln(_X: f64, _Y: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalbn(_X: f64, _Y: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn tgamma(_X: f64) -> f64;
}
extern "C" {
    pub fn trunc(_X: f64) -> f64;
}
extern "C" {
    pub fn _j0(_X: f64) -> f64;
}
extern "C" {
    pub fn _j1(_X: f64) -> f64;
}
extern "C" {
    pub fn _jn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
extern "C" {
    pub fn _y0(_X: f64) -> f64;
}
extern "C" {
    pub fn _y1(_X: f64) -> f64;
}
extern "C" {
    pub fn _yn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
extern "C" {
    pub fn acoshf(_X: f32) -> f32;
}
extern "C" {
    pub fn asinhf(_X: f32) -> f32;
}
extern "C" {
    pub fn atanhf(_X: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(_X: f32) -> f32;
}
extern "C" {
    pub fn _chgsignf(_X: f32) -> f32;
}
extern "C" {
    pub fn copysignf(_Number: f32, _Sign: f32) -> f32;
}
extern "C" {
    pub fn _copysignf(_Number: f32, _Sign: f32) -> f32;
}
extern "C" {
    pub fn erff(_X: f32) -> f32;
}
extern "C" {
    pub fn erfcf(_X: f32) -> f32;
}
extern "C" {
    pub fn expm1f(_X: f32) -> f32;
}
extern "C" {
    pub fn exp2f(_X: f32) -> f32;
}
extern "C" {
    pub fn fdimf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(_X: f32, _Y: f32, _Z: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn fminf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn _hypotf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn ilogbf(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lgammaf(_X: f32) -> f32;
}
extern "C" {
    pub fn llrintf(_X: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundf(_X: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn log1pf(_X: f32) -> f32;
}
extern "C" {
    pub fn log2f(_X: f32) -> f32;
}
extern "C" {
    pub fn logbf(_X: f32) -> f32;
}
extern "C" {
    pub fn lrintf(_X: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundf(_X: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nanf(_X: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn nearbyintf(_X: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(_X: f32, _Y: f64) -> f32;
}
extern "C" {
    pub fn remainderf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn remquof(_X: f32, _Y: f32, _Z: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(_X: f32) -> f32;
}
extern "C" {
    pub fn roundf(_X: f32) -> f32;
}
extern "C" {
    pub fn scalblnf(_X: f32, _Y: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn scalbnf(_X: f32, _Y: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn tgammaf(_X: f32) -> f32;
}
extern "C" {
    pub fn truncf(_X: f32) -> f32;
}
extern "C" {
    pub fn _logbf(_X: f32) -> f32;
}
extern "C" {
    pub fn _nextafterf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn _finitef(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isnanf(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fpclassf(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_FMA3_enable(_Flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_FMA3_enable() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(_X: f32) -> f32;
}
extern "C" {
    pub fn asinf(_X: f32) -> f32;
}
extern "C" {
    pub fn atan2f(_Y: f32, _X: f32) -> f32;
}
extern "C" {
    pub fn atanf(_X: f32) -> f32;
}
extern "C" {
    pub fn ceilf(_X: f32) -> f32;
}
extern "C" {
    pub fn cosf(_X: f32) -> f32;
}
extern "C" {
    pub fn coshf(_X: f32) -> f32;
}
extern "C" {
    pub fn expf(_X: f32) -> f32;
}
extern "C" {
    pub fn floorf(_X: f32) -> f32;
}
extern "C" {
    pub fn fmodf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn log10f(_X: f32) -> f32;
}
extern "C" {
    pub fn logf(_X: f32) -> f32;
}
extern "C" {
    pub fn modff(_X: f32, _Y: *mut f32) -> f32;
}
extern "C" {
    pub fn powf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn sinf(_X: f32) -> f32;
}
extern "C" {
    pub fn sinhf(_X: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(_X: f32) -> f32;
}
extern "C" {
    pub fn tanf(_X: f32) -> f32;
}
extern "C" {
    pub fn tanhf(_X: f32) -> f32;
}
extern "C" {
    pub fn acoshl(_X: f64) -> f64;
}
extern "C" {
    pub fn asinhl(_X: f64) -> f64;
}
extern "C" {
    pub fn atanhl(_X: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(_X: f64) -> f64;
}
extern "C" {
    pub fn copysignl(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn erfl(_X: f64) -> f64;
}
extern "C" {
    pub fn erfcl(_X: f64) -> f64;
}
extern "C" {
    pub fn exp2l(_X: f64) -> f64;
}
extern "C" {
    pub fn expm1l(_X: f64) -> f64;
}
extern "C" {
    pub fn fdiml(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn fmal(_X: f64, _Y: f64, _Z: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn fminl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn ilogbl(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lgammal(_X: f64) -> f64;
}
extern "C" {
    pub fn llrintl(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundl(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn log1pl(_X: f64) -> f64;
}
extern "C" {
    pub fn log2l(_X: f64) -> f64;
}
extern "C" {
    pub fn logbl(_X: f64) -> f64;
}
extern "C" {
    pub fn lrintl(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundl(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nanl(_X: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nearbyintl(_X: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn nexttowardl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remainderl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remquol(_X: f64, _Y: f64, _Z: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rintl(_X: f64) -> f64;
}
extern "C" {
    pub fn roundl(_X: f64) -> f64;
}
extern "C" {
    pub fn scalblnl(_X: f64, _Y: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalbnl(_X: f64, _Y: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn tgammal(_X: f64) -> f64;
}
extern "C" {
    pub fn truncl(_X: f64) -> f64;
}
extern "C" {
    pub static mut HUGE: f64;
}
extern "C" {
    pub fn j0(_X: f64) -> f64;
}
extern "C" {
    pub fn j1(_X: f64) -> f64;
}
extern "C" {
    pub fn jn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
extern "C" {
    pub fn y0(_X: f64) -> f64;
}
extern "C" {
    pub fn y1(_X: f64) -> f64;
}
extern "C" {
    pub fn yn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
extern "C" {
    pub fn hlc_static_call(
        fun: *mut ::std::os::raw::c_void,
        t: *mut hl_type,
        args: *mut *mut ::std::os::raw::c_void,
        out: *mut vdynamic,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hlc_get_wrapper(t: *mut hl_type) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_entry_point();
}
pub const hl_op_OMov: hl_op = 0;
pub const hl_op_OInt: hl_op = 1;
pub const hl_op_OFloat: hl_op = 2;
pub const hl_op_OBool: hl_op = 3;
pub const hl_op_OBytes: hl_op = 4;
pub const hl_op_OString: hl_op = 5;
pub const hl_op_ONull: hl_op = 6;
pub const hl_op_OAdd: hl_op = 7;
pub const hl_op_OSub: hl_op = 8;
pub const hl_op_OMul: hl_op = 9;
pub const hl_op_OSDiv: hl_op = 10;
pub const hl_op_OUDiv: hl_op = 11;
pub const hl_op_OSMod: hl_op = 12;
pub const hl_op_OUMod: hl_op = 13;
pub const hl_op_OShl: hl_op = 14;
pub const hl_op_OSShr: hl_op = 15;
pub const hl_op_OUShr: hl_op = 16;
pub const hl_op_OAnd: hl_op = 17;
pub const hl_op_OOr: hl_op = 18;
pub const hl_op_OXor: hl_op = 19;
pub const hl_op_ONeg: hl_op = 20;
pub const hl_op_ONot: hl_op = 21;
pub const hl_op_OIncr: hl_op = 22;
pub const hl_op_ODecr: hl_op = 23;
pub const hl_op_OCall0: hl_op = 24;
pub const hl_op_OCall1: hl_op = 25;
pub const hl_op_OCall2: hl_op = 26;
pub const hl_op_OCall3: hl_op = 27;
pub const hl_op_OCall4: hl_op = 28;
pub const hl_op_OCallN: hl_op = 29;
pub const hl_op_OCallMethod: hl_op = 30;
pub const hl_op_OCallThis: hl_op = 31;
pub const hl_op_OCallClosure: hl_op = 32;
pub const hl_op_OStaticClosure: hl_op = 33;
pub const hl_op_OInstanceClosure: hl_op = 34;
pub const hl_op_OVirtualClosure: hl_op = 35;
pub const hl_op_OGetGlobal: hl_op = 36;
pub const hl_op_OSetGlobal: hl_op = 37;
pub const hl_op_OField: hl_op = 38;
pub const hl_op_OSetField: hl_op = 39;
pub const hl_op_OGetThis: hl_op = 40;
pub const hl_op_OSetThis: hl_op = 41;
pub const hl_op_ODynGet: hl_op = 42;
pub const hl_op_ODynSet: hl_op = 43;
pub const hl_op_OJTrue: hl_op = 44;
pub const hl_op_OJFalse: hl_op = 45;
pub const hl_op_OJNull: hl_op = 46;
pub const hl_op_OJNotNull: hl_op = 47;
pub const hl_op_OJSLt: hl_op = 48;
pub const hl_op_OJSGte: hl_op = 49;
pub const hl_op_OJSGt: hl_op = 50;
pub const hl_op_OJSLte: hl_op = 51;
pub const hl_op_OJULt: hl_op = 52;
pub const hl_op_OJUGte: hl_op = 53;
pub const hl_op_OJNotLt: hl_op = 54;
pub const hl_op_OJNotGte: hl_op = 55;
pub const hl_op_OJEq: hl_op = 56;
pub const hl_op_OJNotEq: hl_op = 57;
pub const hl_op_OJAlways: hl_op = 58;
pub const hl_op_OToDyn: hl_op = 59;
pub const hl_op_OToSFloat: hl_op = 60;
pub const hl_op_OToUFloat: hl_op = 61;
pub const hl_op_OToInt: hl_op = 62;
pub const hl_op_OSafeCast: hl_op = 63;
pub const hl_op_OUnsafeCast: hl_op = 64;
pub const hl_op_OToVirtual: hl_op = 65;
pub const hl_op_OLabel: hl_op = 66;
pub const hl_op_ORet: hl_op = 67;
pub const hl_op_OThrow: hl_op = 68;
pub const hl_op_ORethrow: hl_op = 69;
pub const hl_op_OSwitch: hl_op = 70;
pub const hl_op_ONullCheck: hl_op = 71;
pub const hl_op_OTrap: hl_op = 72;
pub const hl_op_OEndTrap: hl_op = 73;
pub const hl_op_OGetI8: hl_op = 74;
pub const hl_op_OGetI16: hl_op = 75;
pub const hl_op_OGetMem: hl_op = 76;
pub const hl_op_OGetArray: hl_op = 77;
pub const hl_op_OSetI8: hl_op = 78;
pub const hl_op_OSetI16: hl_op = 79;
pub const hl_op_OSetMem: hl_op = 80;
pub const hl_op_OSetArray: hl_op = 81;
pub const hl_op_ONew: hl_op = 82;
pub const hl_op_OArraySize: hl_op = 83;
pub const hl_op_OType: hl_op = 84;
pub const hl_op_OGetType: hl_op = 85;
pub const hl_op_OGetTID: hl_op = 86;
pub const hl_op_ORef: hl_op = 87;
pub const hl_op_OUnref: hl_op = 88;
pub const hl_op_OSetref: hl_op = 89;
pub const hl_op_OMakeEnum: hl_op = 90;
pub const hl_op_OEnumAlloc: hl_op = 91;
pub const hl_op_OEnumIndex: hl_op = 92;
pub const hl_op_OEnumField: hl_op = 93;
pub const hl_op_OSetEnumField: hl_op = 94;
pub const hl_op_OAssert: hl_op = 95;
pub const hl_op_ORefData: hl_op = 96;
pub const hl_op_ORefOffset: hl_op = 97;
pub const hl_op_ONop: hl_op = 98;
pub const hl_op_OLast: hl_op = 99;
pub type hl_op = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_native {
    pub lib: *const ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
    pub t: *mut hl_type,
    pub findex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_hl_native() {
    assert_eq!(
        ::std::mem::size_of::<hl_native>(),
        32usize,
        concat!("Size of: ", stringify!(hl_native))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_native>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_native))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_native>())).lib as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_native),
            "::",
            stringify!(lib)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_native>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_native),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_native>())).t as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_native),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_native>())).findex as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_native),
            "::",
            stringify!(findex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_opcode {
    pub op: hl_op,
    pub p1: ::std::os::raw::c_int,
    pub p2: ::std::os::raw::c_int,
    pub p3: ::std::os::raw::c_int,
    pub extra: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_hl_opcode() {
    assert_eq!(
        ::std::mem::size_of::<hl_opcode>(),
        24usize,
        concat!("Size of: ", stringify!(hl_opcode))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_opcode>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_opcode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_opcode>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_opcode),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_opcode>())).p1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_opcode),
            "::",
            stringify!(p1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_opcode>())).p2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_opcode),
            "::",
            stringify!(p2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_opcode>())).p3 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_opcode),
            "::",
            stringify!(p3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_opcode>())).extra as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_opcode),
            "::",
            stringify!(extra)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hl_function {
    pub findex: ::std::os::raw::c_int,
    pub nregs: ::std::os::raw::c_int,
    pub nops: ::std::os::raw::c_int,
    pub ref_: ::std::os::raw::c_int,
    pub type_: *mut hl_type,
    pub regs: *mut *mut hl_type,
    pub ops: *mut hl_opcode,
    pub debug: *mut ::std::os::raw::c_int,
    pub obj: *mut hl_type_obj,
    pub field: hl_function__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hl_function__bindgen_ty_1 {
    pub name: *const uchar,
    pub ref_: *mut hl_function,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_hl_function__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<hl_function__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(hl_function__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_function__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_function__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function__bindgen_ty_1>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function__bindgen_ty_1),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function__bindgen_ty_1>())).ref_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function__bindgen_ty_1),
            "::",
            stringify!(ref_)
        )
    );
}
#[test]
fn bindgen_test_layout_hl_function() {
    assert_eq!(
        ::std::mem::size_of::<hl_function>(),
        64usize,
        concat!("Size of: ", stringify!(hl_function))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_function>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_function))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function>())).findex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function),
            "::",
            stringify!(findex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function>())).nregs as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function),
            "::",
            stringify!(nregs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function>())).nops as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function),
            "::",
            stringify!(nops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function>())).ref_ as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function>())).regs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function),
            "::",
            stringify!(regs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function>())).ops as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function),
            "::",
            stringify!(ops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function>())).debug as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function),
            "::",
            stringify!(debug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function>())).obj as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function>())).field as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function),
            "::",
            stringify!(field)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_constant {
    pub global: ::std::os::raw::c_int,
    pub nfields: ::std::os::raw::c_int,
    pub fields: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_hl_constant() {
    assert_eq!(
        ::std::mem::size_of::<hl_constant>(),
        16usize,
        concat!("Size of: ", stringify!(hl_constant))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_constant>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_constant))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_constant>())).global as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_constant),
            "::",
            stringify!(global)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_constant>())).nfields as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_constant),
            "::",
            stringify!(nfields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_constant>())).fields as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_constant),
            "::",
            stringify!(fields)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_code {
    pub version: ::std::os::raw::c_int,
    pub nints: ::std::os::raw::c_int,
    pub nfloats: ::std::os::raw::c_int,
    pub nstrings: ::std::os::raw::c_int,
    pub nbytes: ::std::os::raw::c_int,
    pub ntypes: ::std::os::raw::c_int,
    pub nglobals: ::std::os::raw::c_int,
    pub nnatives: ::std::os::raw::c_int,
    pub nfunctions: ::std::os::raw::c_int,
    pub nconstants: ::std::os::raw::c_int,
    pub entrypoint: ::std::os::raw::c_int,
    pub ndebugfiles: ::std::os::raw::c_int,
    pub hasdebug: bool_,
    pub ints: *mut ::std::os::raw::c_int,
    pub floats: *mut f64,
    pub strings: *mut *mut ::std::os::raw::c_char,
    pub strings_lens: *mut ::std::os::raw::c_int,
    pub bytes: *mut ::std::os::raw::c_char,
    pub bytes_pos: *mut ::std::os::raw::c_int,
    pub debugfiles: *mut *mut ::std::os::raw::c_char,
    pub debugfiles_lens: *mut ::std::os::raw::c_int,
    pub ustrings: *mut *mut uchar,
    pub types: *mut hl_type,
    pub globals: *mut *mut hl_type,
    pub natives: *mut hl_native,
    pub functions: *mut hl_function,
    pub constants: *mut hl_constant,
    pub alloc: hl_alloc,
    pub falloc: hl_alloc,
}
#[test]
fn bindgen_test_layout_hl_code() {
    assert_eq!(
        ::std::mem::size_of::<hl_code>(),
        184usize,
        concat!("Size of: ", stringify!(hl_code))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_code>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_code))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).nints as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(nints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).nfloats as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(nfloats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).nstrings as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(nstrings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).nbytes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(nbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).ntypes as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(ntypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).nglobals as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(nglobals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).nnatives as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(nnatives)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).nfunctions as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(nfunctions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).nconstants as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(nconstants)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).entrypoint as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(entrypoint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).ndebugfiles as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(ndebugfiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).hasdebug as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(hasdebug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).ints as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(ints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).floats as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(floats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).strings as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(strings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).strings_lens as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(strings_lens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).bytes as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).bytes_pos as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(bytes_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).debugfiles as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(debugfiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).debugfiles_lens as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(debugfiles_lens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).ustrings as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(ustrings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).types as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(types)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).globals as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(globals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).natives as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(natives)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).functions as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(functions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).constants as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(constants)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).alloc as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).falloc as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(falloc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_debug_infos {
    pub offsets: *mut ::std::os::raw::c_void,
    pub start: ::std::os::raw::c_int,
    pub large: bool_,
}
#[test]
fn bindgen_test_layout_hl_debug_infos() {
    assert_eq!(
        ::std::mem::size_of::<hl_debug_infos>(),
        16usize,
        concat!("Size of: ", stringify!(hl_debug_infos))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_debug_infos>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_debug_infos))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_debug_infos>())).offsets as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_debug_infos),
            "::",
            stringify!(offsets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_debug_infos>())).start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_debug_infos),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_debug_infos>())).large as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_debug_infos),
            "::",
            stringify!(large)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jit_ctx {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_code_hash {
    pub code: *mut hl_code,
    pub types_hashes: *mut ::std::os::raw::c_int,
    pub globals_signs: *mut ::std::os::raw::c_int,
    pub functions_signs: *mut ::std::os::raw::c_int,
    pub functions_hashes: *mut ::std::os::raw::c_int,
    pub functions_indexes: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_hl_code_hash() {
    assert_eq!(
        ::std::mem::size_of::<hl_code_hash>(),
        48usize,
        concat!("Size of: ", stringify!(hl_code_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_code_hash>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_code_hash))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code_hash>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code_hash),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code_hash>())).types_hashes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code_hash),
            "::",
            stringify!(types_hashes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code_hash>())).globals_signs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code_hash),
            "::",
            stringify!(globals_signs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code_hash>())).functions_signs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code_hash),
            "::",
            stringify!(functions_signs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code_hash>())).functions_hashes as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code_hash),
            "::",
            stringify!(functions_hashes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code_hash>())).functions_indexes as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code_hash),
            "::",
            stringify!(functions_indexes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_module {
    pub code: *mut hl_code,
    pub codesize: ::std::os::raw::c_int,
    pub globals_size: ::std::os::raw::c_int,
    pub globals_indexes: *mut ::std::os::raw::c_int,
    pub globals_data: *mut ::std::os::raw::c_uchar,
    pub functions_ptrs: *mut *mut ::std::os::raw::c_void,
    pub functions_indexes: *mut ::std::os::raw::c_int,
    pub jit_code: *mut ::std::os::raw::c_void,
    pub hash: *mut hl_code_hash,
    pub jit_debug: *mut hl_debug_infos,
    pub jit_ctx: *mut jit_ctx,
    pub ctx: hl_module_context,
}
#[test]
fn bindgen_test_layout_hl_module() {
    assert_eq!(
        ::std::mem::size_of::<hl_module>(),
        104usize,
        concat!("Size of: ", stringify!(hl_module))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_module>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_module))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).codesize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(codesize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).globals_size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(globals_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).globals_indexes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(globals_indexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).globals_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(globals_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).functions_ptrs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(functions_ptrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).functions_indexes as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(functions_indexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).jit_code as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(jit_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).hash as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).jit_debug as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(jit_debug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).jit_ctx as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(jit_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).ctx as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(ctx)
        )
    );
}
extern "C" {
    pub fn hl_code_read(
        data: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
        error_msg: *mut *mut ::std::os::raw::c_char,
    ) -> *mut hl_code;
}
extern "C" {
    pub fn hl_code_hash_alloc(c: *mut hl_code) -> *mut hl_code_hash;
}
extern "C" {
    pub fn hl_code_hash_finalize(h: *mut hl_code_hash);
}
extern "C" {
    pub fn hl_code_hash_free(h: *mut hl_code_hash);
}
extern "C" {
    pub fn hl_code_free(c: *mut hl_code);
}
extern "C" {
    pub fn hl_code_hash_type(h: *mut hl_code_hash, t: *mut hl_type) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_code_hash_remap_globals(hnew: *mut hl_code_hash, hold: *mut hl_code_hash);
}
extern "C" {
    pub fn hl_get_ustring(c: *mut hl_code, index: ::std::os::raw::c_int) -> *const uchar;
}
extern "C" {
    pub fn hl_op_name(op: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
pub type h_bool = ::std::os::raw::c_uchar;
extern "C" {
    pub fn hl_module_alloc(code: *mut hl_code) -> *mut hl_module;
}
extern "C" {
    pub fn hl_module_init(m: *mut hl_module, hot_reload: h_bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_module_patch(m: *mut hl_module, code: *mut hl_code) -> h_bool;
}
extern "C" {
    pub fn hl_module_free(m: *mut hl_module);
}
extern "C" {
    pub fn hl_module_debug(m: *mut hl_module, port: ::std::os::raw::c_int, wait: h_bool) -> h_bool;
}
extern "C" {
    pub fn hl_profile_setup(sample_count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn hl_profile_end();
}
extern "C" {
    pub fn hl_jit_alloc() -> *mut jit_ctx;
}
extern "C" {
    pub fn hl_jit_free(ctx: *mut jit_ctx, can_reset: h_bool);
}
extern "C" {
    pub fn hl_jit_reset(ctx: *mut jit_ctx, m: *mut hl_module);
}
extern "C" {
    pub fn hl_jit_init(ctx: *mut jit_ctx, m: *mut hl_module);
}
extern "C" {
    pub fn hl_jit_function(
        ctx: *mut jit_ctx,
        m: *mut hl_module,
        f: *mut hl_function,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_jit_code(
        ctx: *mut jit_ctx,
        m: *mut hl_module,
        codesize: *mut ::std::os::raw::c_int,
        debug: *mut *mut hl_debug_infos,
        previous: *mut hl_module,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_jit_patch_method(
        old_fun: *mut ::std::os::raw::c_void,
        new_fun_table: *mut *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
